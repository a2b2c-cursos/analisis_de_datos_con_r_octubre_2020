#Primero le decimos a R en qué directorio queremos que trabaje
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#Leemos un archivo csv. Usamos header = T para que tome la primera fila del archivo como los nombres de los atributos
#y stringsAsFactors = F para que no modifique los atributos tipo character o string
casos_covid <- read.csv(file = "datasets/cases-covid-19.csv", stringsAsFactors = F, header = T)
#Veamos cuantos datos tiene nuestro dataset, representados por las filas de la tabla
nrow(casos_covid)
#Veamos cuantos atributos tiene nuestro dataset, representados por las columnas de la tabla
ncol(casos_covid)
#Veamos qué tipo de atributos son
str(casos_covid)
#Imprimamos las primeras 10 filas del dataset
head(casos_covid, n = 10)
#Imprimamos las últimas 10 filas del dataset
tail(casos_covid, n = 10)
#Imprimamos los nombres de las variables
colnames(casos_covid)
#Podemos abrirlo tipo excel
View(casos_covid)
#----------------------------------------------------------------------
#Leamos un archivo tabulado usando otra función de R, read.delim. Esta función permite leer
#un archivo separado por cualquier delimitador, coma, tab, espacios, etc.
casos_covid_secuenciados <- read.delim("datasets/casos_covid_secuenciados.txt", sep = "\t",
header = T, stringsAsFactors = F)
#Entendamos el dataset
#Veamos cuantos datos tiene nuestro dataset, representados por las filas de la tabla
nrow(casos_covid_secuenciados)
#Veamos cuantos atributos tiene nuestro dataset, representados por las columnas de la tabla
ncol(casos_covid_secuenciados)
#Imprimamos las primeras 10 filas del dataset
head(casos_covid_secuenciados, n = 10)
#Imprimamos las últimas 10 filas del dataset
tail(casos_covid_secuenciados, n = 10)
#Imprimamos los nombres de las variables
colnames(casos_covid_secuenciados)
#Podemos abrirlo tipo excel
View(casos_covid_secuenciados)
#Veamos qué tipo de atributos son
str(casos_covid_secuenciados)
#Sequence.Length, a, c, g, t son enteros (int) y an, cn, gn y tn son valores "reales" (num), mientras que el resto son characters
#Veamos un resumen de Sequence.Length
class(casos_covid_secuenciados$Virus.Strain.Name)
nrow(casos_covid_secuenciados)
casos_covid_secuenciados$Sequence.Length
summary(casos_covid_secuenciados$Sequence.Length)
#Calculemos las distintas medidas de centralidad
media <- mean(casos_covid_secuenciados$Sequence.Length)
media
mediana <- median(casos_covid_secuenciados$Sequence.Length)
mediana
#Dejamos la moda para después
#Calculemos las distintas medidas de dispersión
rango <- max(casos_covid_secuenciados$Sequence.Length)-min(casos_covid_secuenciados$Sequence.Length)
rango
varianza <- var(casos_covid_secuenciados$Sequence.Length)
varianza
desvio <- sd(casos_covid_secuenciados$Sequence.Length)
desvio
iqr <- IQR(casos_covid_secuenciados$Sequence.Length)
iqr
#Grafiquemos un histograma con la distribución
hist(casos_covid_secuenciados$Sequence.Length, xlab="Longitud de la secuencia", main="Histograma de casos", breaks=20)
#Efectivamente la mayor parte de los valores está cerca de los 30000 pero tenemos un grupo
#de valores que están cerca del 0. Son dos poblaciones distintas, vamos a tener que analizarlas
#por separado!!
#Elegimos los valores por arriba de 29000
ids_secuencias_largas <- which(casos_covid_secuenciados$Sequence.Length > 29000)
secuencias_largas     <- casos_covid_secuenciados$Sequence.Length[ids_secuencias_largas]
#Veamos que pasa nuevamente con el resumen y la dispersión
summary(secuencias_largas)
sd(secuencias_largas)
IQR(secuencias_largas)
#Ahora todos los valores son más parecidos
hist(secuencias_largas)
#Podemos graficar un boxplot y comparar la información de ambos gráficos
boxplot(secuencias_largas)
#R permite graficar tipo mosaico, así podemos graficar los dos juntos
#La función layout recibe una matriz y grafica un mosaico en función de la cantidad de filas
#y columnas que tiene esa matriz
mosaico_layout <- matrix(1:2, ncol=1, nrow = 2)
layout(mosaico_layout)
hist(secuencias_largas)
hist(secuencias_largas)
layout(mosaico_layout)
hist(secuencias_largas)
boxplot(secuencias_largas, horizontal = T) #Graficamos el boxplot horizontal para comparar
#Volvemos al layout convencional
layout(1)
#Volvamos a la moda. La moda es el valor que más veces aparece. Para calcularla tenemos que contar
#cuantas veces aparece cada valor y quedarnos con el que más veces aparezca.
#Usamos table para contar y which.max para que nos diga cual es el valor que más aparece
cuantas_veces_aparece_cada_valor <- table(secuencias_largas)
which.max(cuantas_veces_aparece_cada_valor)
median(secuencias_largas)
mean(secuencias_largas)#
#Podemos ver cuantas secuencias hay por ubicación
table(casos_covid_secuenciados$Location)
#Si queremos ver por país, vamos a tener que procesar las ubicaciones, quedándonos únicamente con la parte del país
#Usamos strsplit para partir la cadena, lapply para quedarnos con la primera parte y unlist para obtener finalmente
#un vector
paises <- strsplit(casos_covid_secuenciados$Location, " / ", fixed = F)
paises <- unlist(lapply(paises, function(s){
return(s[1])
}))
casos_covid_secuenciados$pais <- paises
table(casos_covid_secuenciados$pais)
paises
#Si queremos ver por país, vamos a tener que procesar las ubicaciones, quedándonos únicamente con la parte del país
#Usamos strsplit para partir la cadena, lapply para quedarnos con la primera parte y unlist para obtener finalmente
#un vector
casos_covid_secuenciados$Location
#Si queremos ver por país, vamos a tener que procesar las ubicaciones, quedándonos únicamente con la parte del país
#Usamos strsplit para partir la cadena, lapply para quedarnos con la primera parte y unlist para obtener finalmente
#un vector
head(casos_covid_secuenciados$Location)
#Si queremos ver por país, vamos a tener que procesar las ubicaciones, quedándonos únicamente con la parte del país
#Usamos strsplit para partir la cadena, lapply para quedarnos con la primera parte y unlist para obtener finalmente
#un vector
head(casos_covid_secuenciados$Location, n = 10)
paises <- strsplit(casos_covid_secuenciados$Location, " / ", fixed = F)
head(paises)
class(paises)
#Veamos como funciona primerItem
vectorDePrueba <- c("Curso", "De", "R")
primerItem(vectorDePrueba)
#Con R podemos aplicar una misma función a cada elemento de la lista
primerItem <- function(v){
return(v[1])
}
#Veamos como funciona primerItem
vectorDePrueba <- c("Curso", "De", "R")
primerItem(vectorDePrueba)
#Apliquemos primerItem a cada elemento de la lista para obtener los países
paises <- lapply(paises, primerItem)
paises
#Sigue siendo una lista, podemos "desenlistarla"
paises <- unlist(paises)
paises
#Apliquemos primerItem a cada elemento de la lista para obtener los países
paises <- lapply(paises, primerItem)
#Podemos ver cuantas secuencias hay por ubicación
table(casos_covid_secuenciados$Location)
#Si queremos ver por país, vamos a tener que procesar las ubicaciones, quedándonos únicamente con la parte del país
#Usamos strsplit para partir la cadena, lapply para quedarnos con la primera parte y unlist para obtener finalmente
#un vector
head(casos_covid_secuenciados$Location, n = 10)
paises <- strsplit(casos_covid_secuenciados$Location, " / ", fixed = F)
head(paises)
class(paises)
#Con R podemos aplicar una misma función a cada elemento de la lista
primerItem <- function(v){
return(v[1])
}
#Veamos como funciona primerItem
vectorDePrueba <- c("Curso", "De", "R")
primerItem(vectorDePrueba)
#Apliquemos primerItem a cada elemento de la lista para obtener los países
paises <- lapply(paises, primerItem)
paises
class(paises)
#Sigue siendo una lista, podemos "desenlistarla"
paises <- unlist(paises)
paises
casos_covid_secuenciados$pais <- paises
table(casos_covid_secuenciados$pais)
#Encontremos la cantidad de secuencias por país
table(casos_covid_secuenciados$pais)
#En lugar de caracterizar cada variable por separado, nos puede interesar comparar
#distintas variables entre si. Por ejemplo, podemos querer comparar su distribución y
#sus medias y varianzas o encontrar relaciones entre los mismos.
#Veamos qué pasa con a, c, g y t. Pero primero, eliminemos todas las muestras
#de secuencias cortas. Podemos usar varios criterios para esto, por ejemplo, el de los bigotes del
#boxplot. Nos quedamos con las secuencias que sean mayores que primer cuartil - 1.5*IQR
primer_cuartil <- quantile(casos_covid_secuenciados$Sequence.Length, probs = 0.25)
iqr            <- IQR(casos_covid_secuenciados$Sequence.Length)
ids_secuencias_largas <- which(casos_covid_secuenciados$Sequence.Length > (primer_cuartil-1.5*iqr))
acgt <- casos_covid_secuenciados[ids_secuencias_largas, c("a", "c", "g", "t")]
summary(acgt)
#podemos graficar un boxplot por cada uno rapidamente
dim(acgt)
boxplot(acgt)
#Vemos que las 4 bases tienen distribuciones diferentes.
#¿Existirá relación entre ellas? Veamos que pasa con c y t. Podemos agregar titulo, nombrar los ejes y jugar con los límites.
plot(acgt$c, acgt$t, main = "c vs. t", xlab = "c (bases)", ylab="t (bases)", xlim=c(5400, 5500), ylim=c(9500, 9600))
#Pareciera haber una relación lineal creciente entre ambas
#Veamos todas contra todas
pairs(acgt)
#Todas tienen una relación lineal creciente.
#¿Descubrimos nueva biología o qué puede estar pasando?
#Agreguemos la longitud de la secuencia
plot(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "a")], main = "Longitud de secuencia vs. a", xlab = "Longitud de secuencia", ylab="a")
#Parece haber una relación lineal creciente también, pero la escala no ayuda
#Cortemos el gráfico
plot(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "a")], ylim=c(8500, 9000))
#¿Todas se comportan igual?
pairs(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "a", "c", "g", "t")])
#Veamos como son los perfiles de secuencias.
#Usamos matplot para graficar las coordenadas paralelas. Tenemos que transponer
#el dataframe para que tome las columnas como variables, y le decimos que el type
#sea "l" para que grafique segmentos
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "a", "c", "g", "t")]), type="l")
rowSums(casos_covid_secuenciados[ids_secuencias_largas, c("an", "cn", "gn", "tn")])
summary(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "an", "cn", "gn", "tn")])
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "an", "cn", "gn", "tn")]), type="l")
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("an", "cn", "gn", "tn")]), type="l")
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "a", "c", "g", "t")]), type="l")
rowSums(casos_covid_secuenciados[ids_secuencias_largas, c("an", "cn", "gn", "tn")])
summary(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "an", "cn", "gn", "tn")])
#Veamos como son los perfiles de secuencias.
#Usamos matplot para graficar las coordenadas paralelas. Tenemos que transponer
#el dataframe para que tome las columnas como variables, y le decimos que el type
#sea "l" para que grafique segmentos
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "a", "c", "g", "t")]), type="l")
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("an", "cn", "gn", "tn")]), type="l")
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("an", "cn", "gn", "tn")]), type="l")
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "an", "cn", "gn", "tn")]), type="l")
#Veamos como son los perfiles de secuencias.
#Usamos matplot para graficar las coordenadas paralelas. Tenemos que transponer
#el dataframe para que tome las columnas como variables, y le decimos que el type
#sea "l" para que grafique segmentos
summary(casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length", "an", "cn", "gn", "tn")])
matplot(t(casos_covid_secuenciados[ids_secuencias_largas, c("an", "cn", "gn", "tn")]), type="l")
table(rowSums(casos_covid_secuenciados[ids_secuencias_largas, c("a", "c", "g", "t")]) == casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length")])
(rowSums(casos_covid_secuenciados[ids_secuencias_largas, c("a", "c", "g", "t")]) - casos_covid_secuenciados[ids_secuencias_largas, c("Sequence.Length")])
#------------------------------------------------------------------------------------
#Ejercicios:
#casos_covid_secuenciados
#1-Caractericen las variable "an", "cn", "gn" y "tn".
#2-Encuentren las secuencias de alta calidad y completas. ¿Cuantas hay de cada una?
#Sugerencia, table puede recibir dos variables y realizar la tabla cruzada:
#table(var1, var2)
#------------------------------------------------------------------------------------
table(casos_covid_secuenciados$Sequence.Quality)
table(casos_covid_secuenciados$Nuc.Completeness)
table(casos_covid_secuenciados$Sequence.Quality, casos_covid_secuenciados$Nuc.Completeness)
#Primero le decimos a R en qué directorio queremos que trabaje
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#1)
#Cargamos los casos de covid por país
cases.covid.19.by.country <- read.csv("datasets/cases-covid-19-by-country.csv", stringsAsFactors=FALSE)
#Cantidad de datos
nrow(cases.covid.19.by.country)
#Cantidad de atributos
ncol(cases.covid.19.by.country)
#Tipo de los atributos
str(cases.covid.19.by.country)
#Nombre de los atributos
colnames(cases.covid.19.by.country)
#Primeros 5 y últimos 5 datos
head(cases.covid.19.by.country, n = 5)
tail(cases.covid.19.by.country, n = 5)
#2)
#Medidas de centralidad, media, mediana y moda
mean(cases.covid.19.by.country$cum_conf)
median(cases.covid.19.by.country$cum_conf)
which.max(table(cases.covid.19.by.country$cum_conf))
mean(cases.covid.19.by.country$cum_death)
median(cases.covid.19.by.country$cum_death)
which.max(table(cases.covid.19.by.country$cum_death))
#Medidas de dispersión, rango, desvío estandar e IQR
max(cases.covid.19.by.country$cum_conf)-min(cases.covid.19.by.country$cum_conf)
sd(cases.covid.19.by.country$cum_conf)
IQR(cases.covid.19.by.country$cum_conf)
max(cases.covid.19.by.country$cum_death)-min(cases.covid.19.by.country$cum_death)
sd(cases.covid.19.by.country$cum_death)
IQR(cases.covid.19.by.country$cum_death)
#Hacemos histogramas. Por lo que vimos antes, quizás es conveniente separar los datos más extremos.
hist(cases.covid.19.by.country$cum_conf)
#Vamos a analizar los países con menos casos.
#Nos podemos quedar con los datos que estén por debajo del "bigote", tercer cuartil + 1.5*IQR
#Calculamos los valores que nos interesan
tercer_cuartil <- summary(cases.covid.19.by.country$cum_conf)[5]
iqr            <- IQR(cases.covid.19.by.country$cum_conf)
#Vemos cuales cumplen con la condición y nos quedamos solo con esos
ids_casos <- which(cases.covid.19.by.country$cum_conf < tercer_cuartil + 1.5*iqr)
cum_conf <- cases.covid.19.by.country$cum_conf[ids_casos]
summary(cum_conf)
hist(cum_conf)
#Hacemos lo mismo con la variable de fallecimientos
hist(cases.covid.19.by.country$cum_death)
#Vamos a analizar los países con menos casos.
#Nos podemos quedar con los datos que estén por debajo del "bigote", tercer cuartil + 1.5*IQR
#Calculamos los valores que nos interesan
tercer_cuartil <- summary(cases.covid.19.by.country$cum_death)[5]
iqr            <- IQR(cases.covid.19.by.country$cum_death)
#Vemos cuales cumplen con la condición y nos quedamos solo con esos
ids_casos <- which(cases.covid.19.by.country$cum_death < tercer_cuartil + 1.5*iqr)
cum_death <- cases.covid.19.by.country$cum_death[ids_casos]
summary(cum_death)
hist(cum_death)
#Grafiquemos un histograma y un boxplot para cada variable
layout(matrix(1:4, ncol=2, nrow=2))
hist(cum_conf)
boxplot(cum_conf, horizontal = T)
hist(cum_death)
boxplot(cum_death, horizontal = T)
#Grafiquemos un scatterplot
layout(1)
plot(cases.covid.19.by.country$cum_conf, cases.covid.19.by.country$cum_death, xlab = "Casos", ylab = "Fallecimientos", main = "Casos de COVID-19 por país")
#Los casos extremos no nos permiten visualizar con detalle la relación. Debemos sacarlos.
tercer_cuartil_conf <- summary(cases.covid.19.by.country$cum_conf)[5]
iqr_conf            <- IQR(cases.covid.19.by.country$cum_conf)
tercer_cuartil_death <- summary(cases.covid.19.by.country$cum_death)[5]
iqr_death            <- IQR(cases.covid.19.by.country$cum_death)
#Vemos cuales cumplen con las dos condiciones y nos quedamos solo con esos
ids_casos <- which(cases.covid.19.by.country$cum_conf < tercer_cuartil_conf + 1.5*iqr_conf &
cases.covid.19.by.country$cum_death < tercer_cuartil_death + 1.5*iqr_death)
casos_de_interes <- cases.covid.19.by.country[ids_casos, ]
#Grafiquemos
plot(casos_de_interes$cum_conf, casos_de_interes$cum_death)
#Sigue siendo dificil de identificar que le pasa a la mayor parte de los casos, recortemos nuevamente
#Vemos cuales cumplen con las dos condiciones y nos quedamos solo con esos
ids_casos <- which(cases.covid.19.by.country$cum_conf < 500 &
cases.covid.19.by.country$cum_death < 10)
casos_de_interes <- cases.covid.19.by.country[ids_casos, ]
#Grafiquemos
plot(casos_de_interes$cum_conf, casos_de_interes$cum_death, main = "Casos confirmados vs. fallecimientos", xlab = "Casos confirmados", ylab="Fallecimientos")
